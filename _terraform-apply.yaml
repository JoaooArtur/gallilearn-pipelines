name: _Terraform Apply

on:
  workflow_call:
    outputs:
      ecr-repository-name:
        description: "The ecr repository name output"
        value: ${{ jobs.terraform-apply.outputs.ecr-repository-name }}
      ecs-service-name:
        description: "The ecs service name output"
        value: ${{ jobs.terraform-apply.outputs.ecs-service-name }}
      container-definition-json:
        description: "The ecs container definition in json format output"
        value: ${{ jobs.terraform-apply.outputs.container-definition-json }}
      container-name:
        description: "The ecs container name output"
        value: ${{ jobs.terraform-apply.outputs.container-name }}
    inputs:
      path-terraform:
        description: 'The path passed from the caller workflow'
        required: true
        type: string
      staging-aws:
        description: 'The staging acocunt id aws passed from the caller workflow'
        required: true
        type: string
      production-aws:
        description: 'The production acocunt id aws passed from the caller workflow'
        required: true
        type: string
      destroy:
        description: "The boolean destroy passed from the caller workflow"
        type: boolean
        default: false
    secrets:
      packages-token:
        description: 'The packages token passed from the caller workflow'
        required: true

env:
  AWS_REGION: us-east-1

jobs:
  terraform-apply:
    name: "Terraform Apply"
    runs-on: ${{ matrix.os }}
    outputs:
      ecr-repository-name: ${{ steps.output-terraform.outputs.ecr-repository-name }}
      ecs-service-name: ${{ steps.output-terraform.outputs.ecs-service-name }}
      container-definition-json: ${{ steps.output-terraform.outputs.container-definition-json }}
      container-name: ${{ steps.output-terraform.outputs.container-name }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path-terraform }}/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set role
        run: |
          if [ "${BRANCH}" == "staging" ]; then
            ROLE_TO_ASSUME="arn:aws:iam::${{ inputs.staging-aws }}:role/Github-Admin"
          elif [ "${BRANCH}" == "production" ]; then
            ROLE_TO_ASSUME="arn:aws:iam::${{ inputs.production-aws }}:role/Github-Admin"
          fi
          echo "ROLE_TO_ASSUME=$ROLE_TO_ASSUME" >> $GITHUB_ENV
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Add terraform as submodule
        run: |
          git config --global credential.helper store
          git submodule add https://${{ secrets.packages-token }}@github.com/JoaooArtur/gallilearn-terraform.git terraform/modules
        working-directory: ${{ inputs.path-terraform }}

      - name: Setup - Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.6.6

      - name: "Run - Terraform Init"
        id: init
        run: |
          terraform init -backend=true -backend-config="config/$BRANCH/backend.hcl"
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: "Run - Terraform Validate"
        id: validate
        run: |
          terraform validate -no-color

      - name: "Run - Terraform Destroy"
        id: destroy
        if: ${{ inputs.destroy == true }}
        run: |
          terraform destroy -auto-approve -var-file="config/$BRANCH/terraform.tfvars"
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: "Run - Terraform Apply"
        id: terraform-apply
        if: ${{ inputs.destroy == false }}
        run: |
          terraform plan -compact-warnings -no-color -var-file="config/$BRANCH/terraform.tfvars" -out $BRANCH-out.tfplan
          terraform apply -auto-approve -input=false -no-color $BRANCH-out.tfplan
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}
          
      - name: "Define output variables"
        id: output-terraform
        if: ${{ inputs.destroy == false }}
        run: |
          echo ecr-repository-name=$(terraform output ecr_repository_name | jq -r .) >> $GITHUB_OUTPUT
          echo ecs-service-name=$(terraform output ecs_service_name | jq -r .) >> $GITHUB_OUTPUT
          echo container-definition-json=$(terraform output container_definition_json | jq -r .) >> $GITHUB_OUTPUT
          echo container-name=$(terraform output container_name | jq -r .) >> $GITHUB_OUTPUT