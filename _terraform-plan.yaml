name: _Terraform Plan

on:
  workflow_call:
    inputs:
      path-terraform:
        description: 'The path passed from the caller workflow'
        required: true
        type: string
      staging-aws:
        description: 'The staging acocunt id aws passed from the caller workflow'
        required: true
        type: string
      production-aws:
        description: 'The production acocunt id aws passed from the caller workflow'
        required: true
        type: string
    secrets:
      packages-token:
        description: 'The packages token passed from the caller workflow'
        required: true

env:
  AWS_REGION: us-east-1

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
    permissions:
      id-token: write
      contents: read
      issues: write
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path-terraform }}/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set role
        run: |
          if [ "${BRANCH}" == "staging" ]; then
            ROLE_TO_ASSUME="arn:aws:iam::${{ inputs.staging-aws }}:role/Github-Admin"
          elif [ "${BRANCH}" == "production" ]; then
            ROLE_TO_ASSUME="arn:aws:iam::${{ inputs.production-aws }}:role/Github-Admin"
          fi
          echo "ROLE_TO_ASSUME=$ROLE_TO_ASSUME" >> $GITHUB_ENV
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Add terraform as submodule
        run: |
          git config --global credential.helper store
          git submodule add https://${{ secrets.packages-token }}@github.com/JoaooArtur/gallilearn-terraform.git terraform/modules
        working-directory: ${{ inputs.path-terraform }}

      - name: Setup - Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.6.6

      - name: "Run - Terraform Init"
        id: init
        run: |
          terraform init -backend=true -backend-config="config/$BRANCH/backend.hcl"
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: "Run - Terraform Validate"
        id: validate
        run: |
          terraform validate -no-color
      
      - name: "Run - Terraform Plan"
        id: plan
        run: |
          terraform plan -compact-warnings -no-color -var-file="config/$BRANCH/terraform.tfvars" -out $BRANCH-out.tfplan
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: "Get Plan Result"
        id: getplan
        run: |
          terraform show -no-color $BRANCH-out.tfplan
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: "Run - Terraform Comment"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## Terraform \`${process.env.BRANCH}\`

            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}
          PLAN: "terraform\n${{ steps.getplan.outputs.stdout }}"