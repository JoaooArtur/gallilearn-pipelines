name: _Deploy

on:
  workflow_call:
    inputs:
      staging-aws:
        description: 'The staging acocunt id aws passed from the caller workflow'
        required: true
        type: string
      production-aws:
        description: 'The production acocunt id aws passed from the caller workflow'
        required: true
        type: string
      ecr-repository-name:
        description: 'The ecr repository name passed from the caller workflow'
        required: true
        type: string
      ecs-service-name:
        description: 'The ecs service name passed from the caller workflow'
        required: true
        type: string
      cluster-name:
        description: 'The ecs cluster name passed from the caller workflow'
        required: true
        type: string
      container-definition-json:
        description: 'The ecs container definition passed from the caller workflow'
        required: true
        type: string
      container-name:
        description: 'The ecs container name passed from the caller workflow'
        required: true
        type: string
      dockerfile-path:
        description: 'The path to the dockerfile passed from the caller workflow'
        required: true
        type: string
      product:
        description: 'The name of product passed from the caller workflow'
        required: true
        type: string
      microservice:
        description: 'The name of microservice passed from the caller workflow'
        required: true
        type: string
      hasEmail:
        description: "The boolean hasEmail passed from the caller workflow"
        type: boolean
        default: false
    secrets:
      packages-token:
        description: 'The packages token passed from the caller workflow'
        required: true

env:
  AWS_REGION: us-east-1
  NUGET_USER: JoaooArtur
  NUGET_PACKAGES_TOKEN: ${{ secrets.packages-token }}

jobs:
  deploy:
    name: "Deploy"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set role
        run: |
          if [ "${BRANCH}" == "staging" ]; then
            ROLE_TO_ASSUME="arn:aws:iam::${{ inputs.staging-aws }}:role/Github-Admin"
          elif [ "${BRANCH}" == "production" ]; then
            ROLE_TO_ASSUME="arn:aws:iam::${{ inputs.production-aws }}:role/Github-Admin"
          fi
          echo "ROLE_TO_ASSUME=$ROLE_TO_ASSUME" >> $GITHUB_ENV
        env:
          BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Add appsettings project as submodule
        env:
          PRODUCT: ${{ inputs.product }}
        run: |
          git config --global credential.helper store
          git submodule add https://${{ secrets.packages-token }}@github.com/JoaooArtur/gallilearn-appsettings.git parameters

      - name: Set appsettings.json informations
        id: appsettings-info
        env:
          MICROSERVICE: ${{ inputs.microservice }}
          BRANCH: ${{ github.event.pull_request.base.ref }}
          PRODUCT: ${{ inputs.product }}
        run: |
          mv -f parameters/${{env.PRODUCT}}/${{env.MICROSERVICE}}/${{env.BRANCH}}/appsettings.json ${{ inputs.dockerfile-path }}
       
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          DOCKERFILE_PATH: ${{ inputs.dockerfile-path }}/Dockerfile
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository-name }}
          IMAGE_TAG: ${{ github.sha }}
          CLUSTER_NAME: ${{ inputs.cluster-name }}
        run: |
          docker build -f ${{env.DOCKERFILE_PATH}} \
            --build-arg NUGET_USER=$NUGET_USER \
            --build-arg NUGET_PACKAGES_TOKEN=$NUGET_PACKAGES_TOKEN \
            --force-rm -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}} .

          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.container-name }} --query taskDefinition | jq -r 'del(
            .taskDefinitionArn,
            .requiresAttributes,
            .compatibilities,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )' > task-definition.json
          ls -la
          cat task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository-name }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.container-name }}
          image: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}
      
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        env:
          SERVICE_NAME: ${{ inputs.ecs-service-name }}
          CLUSTER_NAME: ${{ inputs.cluster-name }}
          BRANCH: ${{ github.event.pull_request.base.ref }}
        with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{env.SERVICE_NAME}}
            cluster: ${{env.BRANCH}}-${{env.CLUSTER_NAME}}
            wait-for-service-stability: true